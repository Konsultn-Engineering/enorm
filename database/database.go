package database

import (
	"context"
	"database/sql"
)

// Database provides an abstract interface for SQL/pgxpool-like database operations.
type Database interface {
	// Query executes a query that returns rows, typically a SELECT.
	Query(query string, args ...any) (Rows, error)
	// QueryContext executes a query with a context.
	QueryContext(ctx context.Context, query string, args ...any) (Rows, error)
	// Exec executes a query without returning rows, such as INSERT or UPDATE.
	Exec(query string, args ...any) (Result, error)
	// PingContext verifies a connection to the database is still alive.
	PingContext(ctx context.Context) error
	// Close closes the database, releasing any open resources.
	Close() error
	// SetMaxOpenConns sets the maximum number of open connections.
	SetMaxOpenConns(n int)
	// SetMaxIdleConns sets the maximum number of idle connections.
	SetMaxIdleConns(n int)
	// Prepare creates a prepared statement for later queries or executions.
	Prepare(query string) (*sql.Stmt, error)
}

// Rows provides an abstract interface for iterating over database rows.
type Rows interface {
	// Next prepares the next result row for reading.
	Next() bool
	// Scan copies the columns from the current row into the provided destinations.
	Scan(dest ...any) error
	// Close closes the rows iterator.
	Close() error
	// Columns returns the column names.
	Columns() ([]string, error)
	// Values returns the values for the current row.
	Values() ([]any, error)
}

// Result provides an abstract interface for the result of an Exec operation.
type Result interface {
	// LastInsertId returns the integer generated by the database in response to a command.
	LastInsertId() (int64, error)
	// RowsAffected returns the number of rows affected by the command.
	RowsAffected() (int64, error)
}
